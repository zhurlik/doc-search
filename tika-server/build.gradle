plugins {
    id 'java-library'
    id 'org.springframework.boot' version '2.4.1'
    id 'io.spring.dependency-management' version '1.0.10.RELEASE'
    id 'jacoco'
}

repositories {
    mavenCentral()
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(11)
    }
}

dependencies {
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter'

    implementation group: 'org.apache.tika', name: 'tika-core', version: property('org.apache.tika')
    implementation group: 'org.apache.tika', name: 'tika-parsers', version: property('org.apache.tika')
    implementation group: 'org.apache.tika', name: 'tika-langdetect', version: property('org.apache.tika')
    implementation group: 'org.apache.tika', name: 'tika-xmp', version: property('org.apache.tika')

    implementation group: 'org.elasticsearch', name: 'elasticsearch', version: property('org.elasticsearch')
    implementation group: 'org.elasticsearch.client', name: 'elasticsearch-rest-high-level-client', version: property('org.elasticsearch')

    compileOnly group: 'org.projectlombok', name: 'lombok'
    annotationProcessor group: 'org.projectlombok', name: 'lombok'

    testImplementation group: 'org.springframework.boot', name: 'spring-boot-starter-test'
    testCompileOnly group: 'org.projectlombok', name: 'lombok'
    testAnnotationProcessor group: 'org.projectlombok', name: 'lombok'
}

test {
    useJUnitPlatform()

    reports {
        html.enabled = true
    }

    testLogging {
        events "passed", "skipped", "failed"
    }

    finalizedBy jacocoTestReport // report is always generated after tests run
}

jacocoTestReport {
    reports {
        xml.enabled false
        csv.enabled false
        html.destination file("${buildDir}/jacocoHtml")
    }
    dependsOn test // tests are required to run before generating the report

    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it,
                    exclude: ['**/config/*Properties*',
                              //'**/model/**',
                              '**/DocSearchApplication*'
                    ]
            )
        }))
    }
}

// Integration tests
sourceSets {
    intTest {
        compileClasspath += sourceSets.main.output
        runtimeClasspath += sourceSets.main.output
    }
}

configurations {
    intTestImplementation.extendsFrom implementation
    intTestRuntimeOnly.extendsFrom runtimeOnly
}

task integrationTest(type: Test) {
    useJUnitPlatform()

    reports {
        html.enabled = true
    }

    testLogging {
        events "passed", "skipped", "failed", "standardError"
    }

    description = 'Runs integration tests.'
    group = 'verification'

    testClassesDirs = sourceSets.intTest.output.classesDirs
    classpath = sourceSets.intTest.runtimeClasspath
    shouldRunAfter test
}

check.dependsOn integrationTest

dependencies {
    intTestImplementation group: 'org.springframework.boot', name: 'spring-boot-starter-test'
    intTestImplementation group: 'org.testcontainers', name: 'testcontainers', version: property('org.testcontainers')
    intTestImplementation group: 'org.testcontainers', name: 'junit-jupiter', version: property('org.testcontainers')
    intTestImplementation group: 'org.testcontainers', name: 'elasticsearch', version: property('org.testcontainers')

    intTestImplementation group: 'org.springframework.boot', name: 'spring-boot-starter-test'
    intTestCompileOnly group: 'org.projectlombok', name: 'lombok'
    intTestAnnotationProcessor group: 'org.projectlombok', name: 'lombok'
}
